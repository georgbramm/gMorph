var N=null,E="",T="t",U="u",searchIndex={};
var R=["Output","keypair","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","to_subset","is_in_subset","to_subset_unchecked","from_subset","formatter"];

searchIndex["gmorph"]={"doc":"gMorph - Fully Homomorphic Encryption library `gMorph` is…","i":[[0,"enc","gmorph","Types and traits which lift `u32` type to FHE compatible…",N,N],[3,"Enc","gmorph::enc","Wrapper type for lifting `u32` type to FHE compatible form",N,N],[3,"KeyPair",E,"Type representing a key pair which can be used for…",N,N],[8,"Encrypt",E,"Helper trait for encrypting data",N,N],[16,R[0],E,E,0,N],[10,"encrypt",E,"Encrypts data using `key_pair` and outputs `Self::Output`",0,[[[R[1]],["u32"]]]],[8,"Decrypt",E,"Helper trait for decrypting data",N,N],[16,R[0],E,E,1,N],[10,"decrypt",E,"Decrypts `Self` using `key_pair` and outputs data",1,[[["self"],[R[1]]]]],[11,"new",E,"Generates new random key pair",2,[[],["self"]]],[11,"into",E,E,3,[[],[U]]],[11,"to_string",E,E,3,[[["self"]],["string"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"to_owned",E,E,3,[[["self"]],[T]]],[11,"clone_into",E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[9],E,E,3,[[["self"]],["option"]]],[11,R[10],E,E,3,[[["self"]],["bool"]]],[11,R[11],E,E,3,[[["self"]],["ss"]]],[11,R[12],E,E,3,[[["ss"]],["sp"]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[9],E,E,2,[[["self"]],["option"]]],[11,R[10],E,E,2,[[["self"]],["bool"]]],[11,R[11],E,E,2,[[["self"]],["ss"]]],[11,R[12],E,E,2,[[["ss"]],["sp"]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"encrypt",E,E,3,[[[R[1]],["u32"]]]],[11,"decrypt",E,E,3,[[["self"],[R[1]]]]],[11,"default",E,"Creates randomized key pair",2,[[],["self"]]],[11,"clone",E,E,3,[[["self"]],["enc"]]],[11,"eq",E,E,3,[[["self"],["enc"]],["bool"]]],[11,"ne",E,E,3,[[["self"],["enc"]],["bool"]]],[11,"fmt",E,E,3,[[["self"],[R[13]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[13]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[13]]],[R[2]]]],[11,"add",E,E,3,[[]]],[11,"mul",E,E,3,[[]]],[11,"add_assign",E,E,3,[[["self"]]]],[11,"mul_assign",E,E,3,[[["self"]]]]],"p":[[8,"Encrypt"],[8,"Decrypt"],[3,"KeyPair"],[3,"Enc"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);